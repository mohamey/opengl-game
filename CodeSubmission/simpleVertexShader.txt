#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

vec3 light_position_world = vec3 (0.0, 10.0, 0.0);

vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.6, 0.6, 0.6); // dull white diffuse light colour
vec3 La = vec3 (0.7, 0.7, 0.7); // grey ambient colour
// surface reflectance
vec3 Ks = vec3 (0.5, 0.5, 0.5); // fully reflect specular light
vec3 Kd = vec3 (0.6, 0.6, 0.6); // orange diffuse surface
vec3 Ka = vec3 (0.5, 0.5, 0.5); // fully reflect ambient light
float specular_exponent = 100.0; // specular 'power'

out vec4 fragment_colour;
out vec2 Vertex_texture;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  //normalised vector towards the light source
  //vec3 s = normalize(vec3(LightPosition - eyeCoords));

  // raise light position to eye space
  vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
  vec3 L = normalize (light_position_eye - vertex_position);
  float dot_prod = max(dot (L, vertex_normal), 0.0);
  
  vec3 R = reflect (-L, vertex_normal);
  vec3 V = normalize (-vertex_position);
  float dot_prod_specular = max(dot (R, V), 0.0);
  float specular_factor = pow (dot_prod_specular, specular_exponent);
  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);

  // ambient intensity
  vec3 Ia = La * Ka;
  // diffuse intensity
  vec3 Id = Ld * Kd * dot_prod;
  // specular intensity 
  vec3 Is = Ls * Ks * specular_factor;
  // final colour
  fragment_colour = vec4 (Is + Id + Ia, 1.0);
  Vertex_texture = vec2(vertex_texture.x, 1 - vertex_texture.y);
}


  